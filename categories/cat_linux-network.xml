<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Weird random notes (linux, network)</title><link>https://andir.github.io/</link><description></description><atom:link href="https://andir.github.io/categories/cat_linux-network.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sun, 09 Oct 2016 13:18:37 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Using VRFs with linux and systemd-networkd</title><link>https://andir.github.io/posts/linux-ip-vrf-systemd-networkd/</link><dc:creator>Andreas Rammhold</dc:creator><description>&lt;div&gt;&lt;p&gt;While working on a systemd-networkd patch to implement (at least basic) VRF interfaces I did write &amp;lt;linux-ip-vrf&amp;gt;. This post should give you a brief example on how you can create a VRF with systemd-networkd.&lt;/p&gt;
&lt;p&gt;At this point it really only created the interfaces and enslaves potential customer interfaces to a given VRF.&lt;/p&gt;
&lt;p&gt;You still have to implement all the &lt;cite&gt;ip rule&lt;/cite&gt;-stuff yourself. For example a &lt;cite&gt;systemd.unit&lt;/cite&gt; file might be the right approach wich is triggert/started after the network is "up".&lt;/p&gt;
&lt;p&gt;First you've to create the systemd.netdev &lt;cite&gt;vrf-customer1.netdev&lt;/cite&gt; file:&lt;/p&gt;
&lt;script src="https://gist.github.com/146803a9343e04fffabc8e7105dff3cd.js"&gt;&lt;/script&gt;&lt;noscript&gt;&lt;pre class="literal-block"&gt;
[NetDev]
Name=vrf-customer1
Kind=vrf

[VRF]
TableId=42
&lt;/pre&gt;
&lt;/noscript&gt;&lt;p&gt;After restarting &lt;cite&gt;systemd-networkd&lt;/cite&gt; with &lt;cite&gt;systemctl restart systemd-networkd&lt;/cite&gt; you should see the corresponding interface:&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_4bc01ba323eb45bca2d5c47bdbad7456-1"&gt;&lt;/a&gt;$ ip -d link show dev vrf-customer1
&lt;a name="rest_code_4bc01ba323eb45bca2d5c47bdbad7456-2"&gt;&lt;/a&gt;9: vrf-customer1: &amp;lt;NOARP,MASTER&amp;gt; mtu &lt;span class="m"&gt;1500&lt;/span&gt; qdisc noop state DOWN mode DEFAULT group default qlen 1000
&lt;a name="rest_code_4bc01ba323eb45bca2d5c47bdbad7456-3"&gt;&lt;/a&gt;    link/ether 02:74:c7:e1:de:64 brd ff:ff:ff:ff:ff:ff promiscuity 0
&lt;a name="rest_code_4bc01ba323eb45bca2d5c47bdbad7456-4"&gt;&lt;/a&gt;    vrf table &lt;span class="m"&gt;42&lt;/span&gt; addrgenmode eui64 numtxqueues &lt;span class="m"&gt;1&lt;/span&gt; numrxqueues 1
&lt;/pre&gt;&lt;p&gt;Note the last line which states &lt;cite&gt;vrf table 42&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;To add an interface to the VRF you'll have to modify/create the corresponding .network file. This is how the file &lt;cite&gt;/etc/systemd/network/enp0s31f6.network&lt;/cite&gt; would look on my notebook:&lt;/p&gt;
&lt;script src="https://gist.github.com/ee155492e3af2f83df39b0808fda5718.js"&gt;&lt;/script&gt;&lt;noscript&gt;&lt;pre class="literal-block"&gt;
[Match]
Name=enp0s31f6

[Network]
Address=192.168.0.1/24
VRF=vrf-customer1

&lt;/pre&gt;
&lt;/noscript&gt;&lt;p&gt;Restarting &lt;cite&gt;systemd-networkd&lt;/cite&gt; again and checking the status using &lt;cite&gt;ip -d link&lt;/cite&gt; gives us:&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_4cc1c8e83e52424c8584a45d89ff0bbc-1"&gt;&lt;/a&gt;&lt;span class="nv"&gt;$ip&lt;/span&gt; -d link show  dev enp0s31f6
&lt;a name="rest_code_4cc1c8e83e52424c8584a45d89ff0bbc-2"&gt;&lt;/a&gt;3: enp0s31f6: &amp;lt;NO-CARRIER,BROADCAST,MULTICAST,UP&amp;gt; mtu &lt;span class="m"&gt;1500&lt;/span&gt; qdisc fq_codel master vrf-customer1 state DOWN mode DEFAULT group default qlen 1000
&lt;a name="rest_code_4cc1c8e83e52424c8584a45d89ff0bbc-3"&gt;&lt;/a&gt; link/ether 50:7b:9d:cf:34:dc brd ff:ff:ff:ff:ff:ff promiscuity 0
&lt;a name="rest_code_4cc1c8e83e52424c8584a45d89ff0bbc-4"&gt;&lt;/a&gt; vrf_slave table &lt;span class="m"&gt;42&lt;/span&gt; addrgenmode eui64 numtxqueues &lt;span class="m"&gt;1&lt;/span&gt; numrxqueues 1
&lt;/pre&gt;&lt;p&gt;Again note the last line which states &lt;cite&gt;vrf_slave table 42&lt;/cite&gt;. Also in the first line you can see that it belongs to the VRF &lt;cite&gt;vrf-customer&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;And that is all for now. You still have to add the &lt;cite&gt;ip rule&lt;/cite&gt; commands in some way or another (there is no support in systemd-networkd yet and I've not had a good idea without inventing &lt;cite&gt;ip rule&lt;/cite&gt; management in systemd).&lt;/p&gt;&lt;/div&gt;</description><category>iproute2</category><category>linux</category><category>routing</category><category>systemd</category><category>vrf</category><guid>https://andir.github.io/posts/linux-ip-vrf-systemd-networkd/</guid><pubDate>Sun, 09 Oct 2016 13:00:00 GMT</pubDate></item></channel></rss>